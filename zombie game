<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <title> free will </title>
   <script src="https://www.gseek.kr/upload/_ccwork/ji/coding/libs/async.js"></script>
   <script src="https://www.gseek.kr/upload/_ccwork/ji/coding/libs/Tween.js"></script>
   <script src="https://www.gseek.kr/upload/_ccwork/ji/coding/libs/utils.js"></script>
   <script src="https://www.gseek.kr/upload/_ccwork/ji/coding/libs/three.min.js"></script>
</head>
<body>
   <div>
       <canvas id="myCanvas" width="320" height="240" style="border: solid 1px black" ></canvas>
   </div>
   <script>
       var canvas = document.querySelector('#myCanvas');
       var context = canvas.getContext('2d');
       function beginNewFramw() {
           //중점이동 초기화
           context.setTransform(1,0,0,1,canvas.width/2, canvas.height/2); //변환행렬 초기화
           //회면지우기
           context.clearRect(-canvas.width/2,-canvas.height/2,canvas.width,canvas.height);
           //십자선그리기
           context.beginPath();
           context.strokeStyle = "#000000";
           context.moveTo(-canvas.width/2,0);
           context.lineTo(canvas.width/2,0);
           context.stroke()
           context.beginPath();
           context.moveTo(0,-canvas.height/2);
           context.lineTo(0,canvas.height/2);
           context.stroke();
           context.closePath();
       }
       var tds_human_path = "https://www.gseek.kr/upload/_ccwork/ji/coding/res/2d/tds_human/";
       var tds_human_files = {
           idle_0 : tds_human_path + 'handgun/idle/survivor-idle_handgun_0.png',
           idle_1 : tds_human_path + 'handgun/idle/survivor-idle_handgun_1.png',
           idle_2 : tds_human_path + 'handgun/idle/survivor-idle_handgun_2.png',
           idle_3 : tds_human_path + 'handgun/idle/survivor-idle_handgun_3.png',
           idle_4 : tds_human_path + 'handgun/idle/survivor-idle_handgun_4.png',
           idle_5 : tds_human_path + 'handgun/idle/survivor-idle_handgun_5.png',
           idle_6 : tds_human_path + 'handgun/idle/survivor-idle_handgun_6.png',
           idle_7 : tds_human_path + 'handgun/idle/survivor-idle_handgun_7.png',
           idle_8 : tds_human_path + 'handgun/idle/survivor-idle_handgun_8.png',
           idle_9 : tds_human_path + 'handgun/idle/survivor-idle_handgun_9.png',
           idle_10 : tds_human_path + 'handgun/idle/survivor-idle_handgun_10.png',
           idle_11 : tds_human_path + 'handgun/idle/survivor-idle_handgun_11.png',
           idle_12 : tds_human_path + 'handgun/idle/survivor-idle_handgun_12.png',
           idle_13 : tds_human_path + 'handgun/idle/survivor-idle_handgun_13.png',
           idle_14 : tds_human_path + 'handgun/idle/survivor-idle_handgun_14.png',
           idle_15 : tds_human_path + 'handgun/idle/survivor-idle_handgun_15.png',
           idle_16 : tds_human_path + 'handgun/idle/survivor-idle_handgun_16.png',
           idle_17 : tds_human_path + 'handgun/idle/survivor-idle_handgun_17.png',
           idle_18 : tds_human_path + 'handgun/idle/survivor-idle_handgun_18.png',
           idle_19 : tds_human_path + 'handgun/idle/survivor-idle_handgun_19.png',
           shoot_0 : tds_human_path + 'handgun/shoot/survivor-shoot_handgun_0.png',
           shoot_1 : tds_human_path + 'handgun/shoot/survivor-shoot_handgun_1.png',
           shoot_2 : tds_human_path + 'handgun/shoot/survivor-shoot_handgun_2.png',
           move_0 : tds_human_path + 'handgun/move/survivor-move_handgun_0.png',
           move_1 : tds_human_path + 'handgun/move/survivor-move_handgun_1.png',
           move_2 : tds_human_path + 'handgun/move/survivor-move_handgun_2.png',
           move_3 : tds_human_path + 'handgun/move/survivor-move_handgun_3.png',
           move_4 : tds_human_path + 'handgun/move/survivor-move_handgun_4.png',
           move_5 : tds_human_path + 'handgun/move/survivor-move_handgun_5.png',
           move_6 : tds_human_path + 'handgun/move/survivor-move_handgun_6.png',
           move_7 : tds_human_path + 'handgun/move/survivor-move_handgun_7.png',
           move_8 : tds_human_path + 'handgun/move/survivor-move_handgun_8.png',
           move_9 : tds_human_path + 'handgun/move/survivor-move_handgun_9.png',
           move_10 : tds_human_path + 'handgun/move/survivor-move_handgun_10.png',
           move_11 : tds_human_path + 'handgun/move/survivor-move_handgun_11.png',
           move_12 : tds_human_path + 'handgun/move/survivor-move_handgun_12.png',
           move_13 : tds_human_path + 'handgun/move/survivor-move_handgun_13.png',
           move_14 : tds_human_path + 'handgun/move/survivor-move_handgun_14.png',
           move_15 : tds_human_path + 'handgun/move/survivor-move_handgun_15.png',
           move_16 : tds_human_path + 'handgun/move/survivor-move_handgun_16.png',
           move_17 : tds_human_path + 'handgun/move/survivor-move_handgun_17.png',
           move_18 : tds_human_path + 'handgun/move/survivor-move_handgun_18.png',
           move_19 : tds_human_path + 'handgun/move/survivor-move_handgun_19.png'
       }
       var tds_zombie = "https://www.gseek.kr/upload/_ccwork/ji/coding/res/2d/tds_zombie/";
       var tds_zombie_files = {
           idle_0 : tds_zombie + 'skeleton-idle_0.png',
           idle_1 : tds_zombie + 'skeleton-idle_1.png',
           idle_2 : tds_zombie + 'skeleton-idle_2.png',
           idle_3 : tds_zombie + 'skeleton-idle_3.png',
           idle_4 : tds_zombie + 'skeleton-idle_4.png',
           idle_5 : tds_zombie + 'skeleton-idle_5.png',
           idle_6 : tds_zombie + 'skeleton-idle_6.png',
           idle_7 : tds_zombie + 'skeleton-idle_7.png',
           idle_8 : tds_zombie + 'skeleton-idle_8.png',
           idle_9 : tds_zombie + 'skeleton-idle_9.png',
           idle_10 : tds_zombie + 'skeleton-idle_10.png',
           idle_11 : tds_zombie + 'skeleton-idle_11.png',
           idle_12 : tds_zombie + 'skeleton-idle_12.png',
           idle_13 : tds_zombie + 'skeleton-idle_13.png',
           idle_14 : tds_zombie + 'skeleton-idle_14.png',
           idle_15 : tds_zombie + 'skeleton-idle_15.png',
           idle_16 : tds_zombie + 'skeleton-idle_16.png',
           move_0 : tds_zombie + 'skeleton-move_0.png',
           move_1 : tds_zombie + 'skeleton-move_1.png',
           move_2 : tds_zombie + 'skeleton-move_2.png',
           move_3 : tds_zombie + 'skeleton-move_3.png',
           move_4 : tds_zombie + 'skeleton-move_4.png',
           move_5 : tds_zombie + 'skeleton-move_5.png',
           move_6 : tds_zombie + 'skeleton-move_6.png',
           move_7 : tds_zombie + 'skeleton-move_7.png',
           move_8 : tds_zombie + 'skeleton-move_8.png',
           move_9 : tds_zombie + 'skeleton-move_9.png',
           move_10 : tds_zombie + 'skeleton-move_10.png',
           move_11 : tds_zombie + 'skeleton-move_11.png',
           move_12 : tds_zombie + 'skeleton-move_12.png',
           move_13 : tds_zombie + 'skeleton-move_13.png',
           move_14 : tds_zombie + 'skeleton-move_14.png',
           move_15 : tds_zombie + 'skeleton-move_15.png',
           move_16 : tds_zombie + 'skeleton-move_16.png',
           attack_0 : tds_zombie + 'skeleton-attack_0.png',
           attack_1 : tds_zombie + 'skeleton-attack_1.png',
           attack_2 : tds_zombie + 'skeleton-attack_2.png',
           attack_3 : tds_zombie + 'skeleton-attack_3.png',
           attack_4 : tds_zombie + 'skeleton-attack_4.png',
           attack_5 : tds_zombie + 'skeleton-attack_5.png',
           attack_6 : tds_zombie + 'skeleton-attack_6.png',
           attack_7 : tds_zombie + 'skeleton-attack_7.png',
           attack_8 : tds_zombie + 'skeleton-attack_8.png'
       }
       var charAnimObj = {
           FrameIndex : 0,
           status : 'idle',
           position : new THREE.Vector3(100,100,0),
           rotation : 0,
           putSprite : function () {
               context.setTransform(1,0,0,1,canvas.width/2, canvas.height/2); //변환행렬 초기화
               context.translate(this.position.x,this.position.y);
               context.scale(0.3,0.3);
               context.rotate( (this.rotation -90) * Math.PI/180);
               if(this.status == "die") {
                   context.beginPath()
                   context.arc(0,0,25, 0, 2 * Math.PI, false);
                   context.fillStyle = "#880000";
                   context.fill();
                   context.arc(10,15,20, 0, 2 * Math.PI, false);
                   context.fillStyle = "#ee0000";
                    context.fill();
               }
               else {
                   var imageObj = this.images[ this.status + "_"+  Math.round(this.FrameIndex) ];
                   context.drawImage(imageObj, 0-imageObj.width/2, 0-imageObj.height/2);
               }
           },
           changeIdleAnim : function () {
               this.FrameIndex = 0;
               this.status = 'idle';
               this.tw_idle = new TWEEN.Tween( this )
                   .to( {
                       FrameIndex : 19
                   }, 1000)
                   .easing( TWEEN.Easing.Linear.None )
                   .repeat(Infinity);
               this.tw_idle.start();
           },
           changeShootAnim :function () {
               this.FrameIndex = 0;
               this.status = 'shoot';
               this.tw_shoot = new TWEEN.Tween( this )
                   .to( {
                       FrameIndex : 2
                   }, 1000)
                   .easing( TWEEN.Easing.Linear.None );
               charAnimObj.tw_shoot.start();
           },
           changeMoveAnim : function () {
               this.FrameIndex = 0;
               this.status = 'move';
               this.tw_shoot = new TWEEN.Tween( this )
                   .to( {
                       FrameIndex : 19
                   }, 1000)
                   .easing( TWEEN.Easing.Linear.None );
               this.tw_shoot.start();
           }
       };
       var zombieAniObj = {
           FrameIndex : 0,
           status : 'idle',
           position : new THREE.Vector3(0,0,0),
           collusion_radius : 25,
           rotation : 0,
           images : {},
           Fsm : 'idle',
           putSprite : function () {
               context.setTransform(1,0,0,1,canvas.width/2, canvas.height/2); //변환행렬 초기화
               context.translate(this.position.x,this.position.y);
               context.scale(0.3,0.3);
               context.rotate( (this.rotation -90) * Math.PI/180);
               if(this.status == "die") {
                   context.beginPath()
                   context.arc(0,0,25, 0, 2 * Math.PI, false);
                   context.fillStyle = "#880000";
                   context.fill();
                   context.arc(10,15,20, 0, 2 * Math.PI, false);
                   context.fillStyle = "#ee0000";
                   context.fill();
               }
               else {
                   var imageObj = this.images[ this.status + "_"+  Math.round(this.FrameIndex) ];
                   context.drawImage(imageObj, 0-imageObj.width/2, 0-imageObj.height/2);
               }
           },
           changeIdleAnim : function () {
               this.FrameIndex = 0;
               this.status = 'idle';
               this.tw_idle = new TWEEN.Tween( this )
                   .to( {
                       FrameIndex : 16
                   }, 1000)
                   .easing( TWEEN.Easing.Linear.None )
                   .repeat(Infinity);
               this.tw_idle.start();
           },
           changeAttackAnim : function () {
               this.FrameIndex = 0;
               this.status = 'attack';
               this.tw_idle = new TWEEN.Tween( this )
                   .to( {
                       FrameIndex : 8
                   }, 1000)
                   .easing( TWEEN.Easing.Linear.None )
                   .repeat(Infinity);
               this.tw_idle.start();
           },
           changeMoveAnim : function () {
               this.FrameIndex = 0;
               this.status = 'move';
               this.tw_idle = new TWEEN.Tween( this )
                   .to( {
                       FrameIndex : 16
                   }, 1000)
                   .easing( TWEEN.Easing.Linear.None )
                   .repeat(Infinity);
               this.tw_idle.start();
           }
       }
       var keyInputTrigger = {
           statusTable : {
               "KeyW" : false,
               "KeyS" : false,
               "KeyA" : false,
               "KeyD" : false
           },
           triggerTable : {
           },
           callback : function (delta) {},
           setCallback : function (cb) {
               this.callback = cb.bind(this)
           }
       }
       var AiTrigger = {
           callback : function (delta) {},
           setCallback : function (cb) {
               this.callback = cb.bind(this)
           }
       }
       async.waterfall([
           function (next) {
               loadImages(
                   tds_zombie_files , (images)=> {
                       next(null,images);
                   }
               );
           },
           function (images,next) {
               zombieAniObj.images = images;
               zombieAniObj.changeIdleAnim();
               zombieAniObj.Fsm = "think"
               next();
           },
           function (next) {
               loadImages(
                   tds_human_files, (images)=> {
                       next(null,images);
                   }
               );
           },
           function (images,next) {
               charAnimObj.changeIdleAnim();
               charAnimObj.images = images;
               charAnimObj.Fsm = "idle";
               var _tick = (new Date()).getTime();
               function loop() {
                   //에니메이션 처리
                   TWEEN.update();
                   //델타틱 계산
                   let deltaTick = ((new Date()).getTime() - _tick)/1000;
                   _tick = (new Date()).getTime();
                   //트리거 처리
                   keyInputTrigger.callback(deltaTick);
                   AiTrigger.callback(deltaTick);
                   beginNewFramw();
                   charAnimObj.putSprite();
                   zombieAniObj.putSprite();
                   requestAnimationFrame(loop);
               }
               loop();
               next();
           },
           function (next) {
               document.addEventListener('keydown',(evt)=>{
                   keyInputTrigger.statusTable[evt.code] = true;
                   keyInputTrigger.triggerTable[evt.code] = true; //트리거는 키가 눌렀을때만 처리한다.
               })
               document.addEventListener('keyup',(evt)=>{
                   keyInputTrigger.statusTable[evt.code] = false;
               })
               next();
           }
       ],
       (error,result)=> {
           startApp()
       });
       function startApp() {
           keyInputTrigger.setCallback(function (delta) {
               var front_vect = new THREE.Vector3(0,1,0);
               var side_vect = new THREE.Vector3(1,0,0);
               //회전적용
               var quaternion = new THREE.Quaternion();
               quaternion.setFromAxisAngle( new THREE.Vector3( 0, 0, 1 ), charAnimObj.rotation * Math.PI / 180 );
               front_vect.applyQuaternion(quaternion);
               side_vect.applyQuaternion(quaternion);
               switch (charAnimObj.Fsm) {
                   case "idle":
                       if(this.statusTable["KeyW"] == true
                           || this.statusTable["KeyS"] == true
                           || this.statusTable["KeyA"] == true
                           || this.statusTable["KeyD"] == true
                       ) {
                           charAnimObj.Fsm = "move";
                           charAnimObj.changeMoveAnim();
                       }
                       else if(this.triggerTable["Space"] == true) {
                           this.triggerTable["Space"] = false;
                           charAnimObj.Fsm = "shoot";
                           charAnimObj.changeShootAnim();
                           let ray_1 = new THREE.Ray(
                               new THREE.Vector3(charAnimObj.position.x,charAnimObj.position.y,0),
                               front_vect.negate()
                           );
                           let sphere_1 = new THREE.Sphere(zombieAniObj.position,zombieAniObj.collusion_radius);
                           let coll = ray_1.intersectSphere(sphere_1);
                           if(coll != null ) {
                               zombieAniObj.Fsm =  zombieAniObj.status = "die";
                           }
                       }
                       break;
                   case "move":
                       if(this.statusTable["KeyW"] == false && this.statusTable["KeyS"] == false
                           && this.statusTable["KeyA"] == false
                           && this.statusTable["KeyD"] == false
                       ) {
                           charAnimObj.Fsm = "idle";
                           charAnimObj.changeIdleAnim();
                       }
                       if(this.statusTable["KeyW"] == true) {
                           charAnimObj.position.addScaledVector(front_vect,-delta * 20)
                       }
                       else if(this.statusTable["KeyS"] == true) {
                           charAnimObj.position.addScaledVector(front_vect,delta * 10 )
                       }
                       if(this.statusTable["KeyA"] == true) {
                           charAnimObj.rotation -= delta*90;
                       }
                       else if(this.statusTable["KeyD"] == true) {
                           charAnimObj.rotation += delta*90;
                       }
                       break;
                   case "shoot":
                       if(charAnimObj.FrameIndex == 2) {
                           charAnimObj.Fsm = "idle";
                           charAnimObj.changeIdleAnim();
                       }
                       break;
               }
           });
           AiTrigger.setCallback(function (delta) {
               var thisObj = zombieAniObj;
               var front_vect = new THREE.Vector3(0,1,0);
               var side_vect = new THREE.Vector3(1,0,0);
               //회전적용
               var quaternion = new THREE.Quaternion();
               quaternion.setFromAxisAngle( new THREE.Vector3( 0, 0, 1 ), thisObj.rotation * Math.PI / 180 );
               front_vect.applyQuaternion(quaternion);
               side_vect.applyQuaternion(quaternion);
               
           });
       }
   </script>
</body>
</html>
